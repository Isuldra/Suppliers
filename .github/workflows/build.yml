name: üèóÔ∏è Build Electron App for macOS & Windows

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.x"

jobs:
  build-macos:
    name: Build for macOS (${{ matrix.arch }})
    # Use macos-13 for Intel if needed, macos-latest targets Apple Silicon primarily
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64] # Build for both Intel and Apple Silicon
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.arch }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        # Only run install if cache wasn't restored
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts # Use --ignore-scripts if electron-builder rebuilds later

      # Optional: Rebuild native modules specifically for the target arch if needed
      # - name: Rebuild native modules (macOS ${{ matrix.arch }})
      #   run: npx electron-rebuild -f -w better-sqlite3 --arch ${{ matrix.arch }}
      - name: Build Application (macOS ${{ matrix.arch }})
        # Pass arch to the build command. Ensure your 'dist' script handles this or call electron-builder directly
        run: npm run dist -- --arch=${{ matrix.arch }}
        # Alternative direct call:
        # run: npx electron-builder --mac --${{ matrix.arch }}

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Supplier-Reminder-Pro-macOS-${{ matrix.arch }}
          path: release/ # Adjust based on your build.directories.output in package.json

  build-windows:
    name: Build for Windows (x64)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-x64-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-x64-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        # Only run install if cache wasn't restored
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts # Use --ignore-scripts if electron-builder rebuilds later

      # Optional: Rebuild native modules specifically for Windows if needed
      # - name: Rebuild native modules (Windows x64)
      #   run: npx electron-rebuild -f -w better-sqlite3
      - name: Build Application (Windows x64)
        # Use your specific windows build script like dist:win (builds NSIS) or dist:portable
        run: npm run dist:win # Assuming this builds NSIS by default
        # To build portable:
        # run: npm run dist:portable

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Supplier-Reminder-Pro-Windows-x64
          path: release/ # Adjust based on your build.directories.output in package.json
