name: üèóÔ∏è Build Electron App for Windows

# Trigger a new workflow run with this comment update
on:
  push:
    branches: [main]
    tags: ["v*"] # Trigger on version tags
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22.x"

jobs:
  build-windows:
    name: Build for Windows (x64)
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Cache electron-builder
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-builder-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-cache-

      - name: Install dependencies
        run: npm ci

      - name: Verify build configuration
        shell: pwsh
        run: |
          $pkg = Get-Content package.json | ConvertFrom-Json
          Write-Host "Windows build configuration: $($pkg.build.win | ConvertTo-Json)"

      - name: Build Application (Windows x64)
        run: npm run build

      - name: Create minimal manifest in dist (Windows)
        shell: pwsh
        run: npm run create-minimal-manifest

      - name: Prepare Dependencies (Windows)
        run: npm run prepare-deps

      - name: Package Application (Windows)
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Build for release if this is a tag
          if ($env:GITHUB_REF -like "refs/tags/*") {
            Write-Host "Building for release (tag detected)"
            npm run release
          } else {
            Write-Host "Building for development"
            # Use the dedicated script for portable builds
            npm run dist:portable
            # Build Windows ZIP installer package
            npm run dist:win
          }
          # Verify the output exists using Get-ChildItem
          if (-not (Get-ChildItem -Path release -Filter '*Portable.exe')) {
            Write-Error "Portable executable not found in release directory"
            exit 1
          }

      - name: List ASAR Contents on Failure (Windows)
        if: failure()
        shell: pwsh
        run: |
          Write-Host "--- Attempting to list ASAR contents ---"
          $asarPath = Get-ChildItem -Path release -Recurse -Filter app.asar | Select-Object -First 1
          if ($asarPath) {
            npx asar list $asarPath.FullName
          } else {
            Write-Host "app.asar not found in release directory."
          }
          Write-Host "--- End ASAR contents list ---"

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true # Won't fail the build if quota is hit
        with:
          name: SupplyChain-OneMed-Windows-x64
          path: release\*Portable.exe
          retention-days: 3 # Reduced retention period

      - name: Upload Windows ZIP Artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: SupplyChain-OneMed-Windows-Zip
          path: release\*.zip
          retention-days: 3
