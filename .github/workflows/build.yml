name: üèóÔ∏è Build Electron App for Windows

# Trigger a new workflow run with this comment update
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.x"

jobs:
  build-windows:
    name: Build for Windows (x64)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Explicitly install potentially missing optional dependencies FIRST
      - name: Preinstall Windows native modules
        run: |
          npm install --save-optional @rollup/rollup-win32-x64-msvc
          npm install --save-optional @esbuild/win32-x64

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build Application (Windows x64)
        run: |
          npm run build

      - name: Create minimal manifest in dist (Windows)
        shell: pwsh
        run: |
          node -e 'const root = require("./package.json"); let main = root.main || "main/main.cjs"; if(main.startsWith("dist/")) main = main.slice(5); const pkg = { name: root.name, version: root.version, description: root.description, author: root.author, main, dependencies: root.dependencies, devDependencies: root.devDependencies }; require("fs").writeFileSync("dist/package.json", JSON.stringify(pkg, null, 2));'
          echo "Copying package-lock.json to dist..."
          Copy-Item package-lock.json dist\\package-lock.json -ErrorAction SilentlyContinue

      - name: Prepare Dependencies (Windows)
        run: |
          npm run prepare-deps

      - name: Package Application (Windows)
        run: |
          npx electron-builder --win --publish never

      - name: List ASAR Contents on Failure (Windows)
        if: failure()
        run: |
          echo "--- Attempting to list ASAR contents --- "
          $asarPath = Get-ChildItem -Path release -Recurse -Filter app.asar | Select-Object -First 1
          if ($asarPath) {
            npx asar list $asarPath.FullName
          } else {
            echo "app.asar not found in release directory."
          }
          echo "--- End ASAR contents list --- "

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true # Won't fail the build if quota is hit
        with:
          name: Supplier-Reminder-Pro-Windows-x64
          path: release/*.exe
          retention-days: 3 # Reduced retention period
