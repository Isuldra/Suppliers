name: üèóÔ∏è Build Electron App for macOS & Windows

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.x"

jobs:
  build-macos:
    name: Build for macOS (${{ matrix.arch }})
    # Use macos-13 for Intel if needed, macos-latest targets Apple Silicon primarily
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64] # Build for both Intel and Apple Silicon
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.arch }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      # Optional: Rebuild native modules specifically for the target arch if needed
      # - name: Rebuild native modules (macOS ${{ matrix.arch }})
      #   run: npx electron-rebuild -f -w better-sqlite3 --arch ${{ matrix.arch }}
      - name: Build Application (macOS ${{ matrix.arch }})
        run: |
          npm run build # Just run the build script from package.json
          npm run prepare-deps # Ensure dependencies are installed after build
          # ADD DEBUG STEP: List dist contents after build
          echo "--- Listing dist directory contents --- "
          ls -R dist || echo "dist directory not found"
          echo "--- End listing dist directory --- "
          npx electron-builder --mac --${{ matrix.arch }} --publish never # Run builder

      # ADD DEBUG STEP: List ASAR contents if packaging failed but ASAR exists
      - name: List ASAR Contents on Failure (macOS)
        if: failure()
        run: |
          echo "--- Attempting to list ASAR contents --- "
          find release -name app.asar -exec npx asar list {} \;
          echo "--- End ASAR contents list --- "

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Supplier-Reminder-Pro-macOS-${{ matrix.arch }}
          path: release/ # Adjust based on your build.directories.output in package.json

  build-windows:
    name: Build for Windows (x64)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Explicitly install potentially missing optional dependencies FIRST
      - name: Preinstall Windows native modules
        run: |
          npm install --save-optional @rollup/rollup-win32-x64-msvc
          npm install --save-optional @esbuild/win32-x64

      - name: Install dependencies
        # Run npm install, allowing scripts to run (including postinstall)
        run: npm ci --ignore-scripts

      # Optional: Rebuild native modules specifically for Windows if needed
      # - name: Rebuild native modules (Windows x64)
      #   run: npx electron-rebuild -f -w better-sqlite3
      - name: Build Application (Windows x64)
        # Modify dist:win script or add --publish never here if dist:win calls builder directly
        # Assuming dist:win just runs 'electron-vite build && electron-builder --win'
        # If dist:win doesn't directly call builder, adjust package.json instead.
        # For now, assuming we modify the workflow step assuming dist:win is NOT used directly for builder args
        # Assuming dist:win just runs 'electron-vite build && electron-builder --win'
        # If dist:win doesn't directly call builder, adjust package.json instead.
        # For now, assuming we modify the workflow step assuming dist:win is NOT used directly for builder args
        run: |
          npm run build
          npm run prepare-deps # Ensure dependencies are installed after build
          npx electron-builder --win --publish never

      # ADD DEBUG STEP: List ASAR contents if packaging failed but ASAR exists
      - name: List ASAR Contents on Failure (Windows)
        if: failure()
        run: |
          echo "--- Attempting to list ASAR contents --- "
          # Use PowerShell commands on Windows runner
          $asarPath = Get-ChildItem -Path release -Recurse -Filter app.asar | Select-Object -First 1
          if ($asarPath) {
            npx asar list $asarPath.FullName
          } else {
            echo "app.asar not found in release directory."
          }
          echo "--- End ASAR contents list --- "

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Supplier-Reminder-Pro-Windows-x64
          path: release/ # Adjust based on your build.directories.output in package.json
