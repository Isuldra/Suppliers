name: 🏗️ Build Electron App for Windows

# Trigger a new workflow run with this comment update
on:
  push:
    branches: [main]
    tags: ["v*"] # Trigger on version tags
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22.x"
  SHARP_IGNORE_GLOBAL_LIBVIPS: "1"

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        os: [windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Clean npm cache
        run: npm cache clean --force

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            %APPDATA%\npm-cache
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Cache electron-builder dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\electron\Cache
            ~\AppData\Local\electron-builder\Cache
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-

      - name: Install dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Create minimal manifest in dist
        shell: pwsh
        run: npm run create-minimal-manifest

      # This is the key step to fix the sharp build issue
      - name: Create .npmrc for electron-builder
        shell: pwsh
        run: |
          Write-Host "Creating .npmrc in dist directory for electron-builder..."
          echo "sharp_binary_host=https://github.com/lovell/sharp-libvips/releases/download" >> dist/.npmrc
          echo "sharp_libvips_binary_host=https://github.com/lovell/sharp-libvips/releases/download" >> dist/.npmrc
          echo "sharp_dist_base_url=https://github.com/lovell/sharp-libvips/releases/download" >> dist/.npmrc
          echo "sharp_ignore_global_libvips=1" >> dist/.npmrc
          echo "sharp_prebuild_platform=win32" >> dist/.npmrc
          echo "sharp_prebuild_arch=x64" >> dist/.npmrc
          Write-Host "Created .npmrc in dist directory"

      - name: Install production dependencies in dist
        shell: pwsh
        run: |
          Write-Host "Installing production dependencies in dist directory..."
          cd dist
          npm ci --only=production
          Write-Host "Production dependencies installed in dist directory"

      - name: Exclude build directories from Windows Defender
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Add-MpPreference -ExclusionPath "${{ github.workspace }}\\dist"
          Add-MpPreference -ExclusionPath "${{ github.workspace }}\\node_modules"
          Add-MpPreference -ExclusionPath "${{ github.workspace }}\\release"

      - name: Package for Development Build
        if: >
          !startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          Write-Host "Building for development (non-tag build)"
          npm run dist:portable
          npm run dist:win
          if (-not (Get-ChildItem -Path release -Filter '*Portable.exe')) {
            Write-Error "Portable executable not found in release directory"
            exit 1
          }

      - name: Package and Release for Tag
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          Write-Host "Building and publishing for release (tag detected)"
          npm run release

      - name: List ASAR Contents on Failure
        if: failure()
        shell: pwsh
        run: |
          Write-Host "--- Attempting to list ASAR contents ---"
          $asarPath = Get-ChildItem -Path release -Recurse -Filter app.asar | Select-Object -First 1
          if ($asarPath) {
            npx asar list $asarPath.FullName
          } else {
            Write-Host "app.asar not found."
          }
          Write-Host "--- End ASAR contents list ---"

      - name: Upload Windows Portable Artifact
        if: >
          !startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: SupplyChain-OneMed-Windows-x64
          path: release/*Portable.exe
          retention-days: 3

      - name: Upload Windows ZIP Artifact
        if: >
          !startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: SupplyChain-OneMed-Windows-Zip
          path: release/*.zip
          retention-days: 3
